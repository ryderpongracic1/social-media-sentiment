// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SentimentAnalysis.Infrastructure.Data.DbContext;

#nullable disable

namespace SentimentAnalysis.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SentimentAnalysisDbContext))]
    partial class SentimentAnalysisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.ProcessingQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_ProcessingQueue_PostId");

                    b.HasIndex("Status", "RetryCount")
                        .HasDatabaseName("IX_ProcessingQueue_Status_RetryCount");

                    b.HasIndex("Status", "Priority", "CreatedAt")
                        .HasDatabaseName("IX_ProcessingQueue_Status_Priority_CreatedAt");

                    b.ToTable("ProcessingQueue");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.SentimentAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnalyzedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<float>("ConfidenceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<string>("DetailedScores")
                        .HasColumnType("jsonb");

                    b.Property<string>("ExtractedEntities")
                        .HasColumnType("jsonb");

                    b.Property<string>("ExtractedKeywords")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsSarcastic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ModelVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("NegativeScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<float>("NeutralScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<int>("OverallSentiment")
                        .HasColumnType("integer");

                    b.Property<float>("PositiveScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ProcessingTime")
                        .HasColumnType("interval");

                    b.Property<float>("SarcasmScore")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 4)
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("Id");

                    b.HasIndex("ConfidenceScore")
                        .HasDatabaseName("IX_SentimentAnalysis_ConfidenceScore");

                    b.HasIndex("PostId")
                        .IsUnique()
                        .HasDatabaseName("IX_SentimentAnalysis_PostId");

                    b.HasIndex("OverallSentiment", "AnalyzedAt")
                        .HasDatabaseName("IX_SentimentAnalysis_OverallSentiment_AnalyzedAt");

                    b.ToTable("SentimentAnalyses");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.SocialMediaPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DownVotes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RawMetadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("SourceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UpVotes")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_SocialMediaPosts_ProcessedAt")
                        .HasFilter("ProcessedAt IS NOT NULL");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_SocialMediaPosts_Timestamp_Include");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Timestamp"), new[] { "Platform", "Status", "UserId" });

                    b.HasIndex("Platform", "Timestamp")
                        .HasDatabaseName("IX_SocialMediaPosts_Platform_Timestamp");

                    b.HasIndex("SourceId", "Platform")
                        .IsUnique()
                        .HasDatabaseName("IX_SocialMediaPosts_SourceId_Platform");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_SocialMediaPosts_Status_CreatedAt");

                    b.ToTable("SocialMediaPosts");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.TrendAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("AvgSentimentScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("GeographicData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("MentionCount")
                        .HasColumnType("integer");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelatedKeywords")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("TimeWindowEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeWindowStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("TrendScore")
                        .HasPrecision(8, 4)
                        .HasColumnType("real");

                    b.Property<int>("WindowType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TimeWindowStart")
                        .HasDatabaseName("IX_TrendAnalysis_TimeWindowStart");

                    b.HasIndex("Platform", "TimeWindowStart")
                        .HasDatabaseName("IX_TrendAnalysis_Platform_TimeWindow");

                    b.HasIndex("TrendScore", "TimeWindowStart")
                        .HasDatabaseName("IX_TrendAnalysis_TrendScore_TimeWindow");

                    b.HasIndex("Keyword", "Platform", "TimeWindowStart")
                        .HasDatabaseName("IX_TrendAnalysis_Keyword_Platform_TimeWindow");

                    b.ToTable("TrendAnalyses");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.TrendKeyword", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrendAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Keyword")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<float>("RelevanceScore")
                        .HasPrecision(5, 4)
                        .HasColumnType("real");

                    b.HasKey("PostId", "TrendAnalysisId", "Keyword");

                    b.HasIndex("Keyword")
                        .HasDatabaseName("IX_TrendKeywords_Keyword");

                    b.HasIndex("RelevanceScore")
                        .HasDatabaseName("IX_TrendKeywords_RelevanceScore");

                    b.HasIndex("TrendAnalysisId");

                    b.HasIndex("PostId", "RelevanceScore")
                        .HasDatabaseName("IX_TrendKeywords_PostId_RelevanceScore");

                    b.ToTable("TrendKeywords");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApiCallsToday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ApiKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DailyApiLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKey")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_ApiKey")
                        .HasFilter("ApiKey IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("Role", "IsActive")
                        .HasDatabaseName("IX_Users_Role_IsActive");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.ProcessingQueue", b =>
                {
                    b.HasOne("SentimentAnalysis.Domain.Entities.SocialMediaPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.SentimentAnalysis", b =>
                {
                    b.HasOne("SentimentAnalysis.Domain.Entities.SocialMediaPost", "Post")
                        .WithOne("SentimentAnalysis")
                        .HasForeignKey("SentimentAnalysis.Domain.Entities.SentimentAnalysis", "PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.TrendKeyword", b =>
                {
                    b.HasOne("SentimentAnalysis.Domain.Entities.SocialMediaPost", "Post")
                        .WithMany("TrendKeywords")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SentimentAnalysis.Domain.Entities.TrendAnalysis", "TrendAnalysis")
                        .WithMany("TrendKeywords")
                        .HasForeignKey("TrendAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("TrendAnalysis");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.SocialMediaPost", b =>
                {
                    b.Navigation("SentimentAnalysis");

                    b.Navigation("TrendKeywords");
                });

            modelBuilder.Entity("SentimentAnalysis.Domain.Entities.TrendAnalysis", b =>
                {
                    b.Navigation("TrendKeywords");
                });
#pragma warning restore 612, 618
        }
    }
}
